import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:qr_coffee/api/manual_api_order.dart';
import 'package:qr_coffee/models/customer.dart';
import 'package:qr_coffee/models/product.dart';
import 'package:qr_coffee/models/order.dart';
import 'package:qr_coffee/models/shop.dart';
import 'package:qr_coffee/models/user.dart';
import 'package:qr_coffee/screens/order_screens/order_details/order_details_customer.dart';
import 'package:qr_coffee/screens/order_screens/order_details/order_details_worker.dart';
import 'package:qr_coffee/service/database_service/database_imports.dart';
import 'package:qr_coffee/shared/functions.dart';
import 'package:qr_coffee/shared/strings.dart';
import 'package:intl/intl.dart';
import 'package:qr_coffee/shared/widgets/custom_snackbar.dart';

Future<int> createOrderFunction(
  BuildContext context,
  List<Product> items,
  Customer customer,
  List<Product> _selectedItems,
  Shop currentShop,
  int paymentMethod,
  UserRole role,
  double plusTime,
) async {
  int price = getTotalPrice(items, _selectedItems);

  if (_selectedItems.isEmpty ||
      (paymentMethod == 2 && price > customer.credits && role != UserRole.worker)) {
    // Notify user something is wrong with order parameters.

    String message = '';
    if (_selectedItems.isEmpty) {
      message = AppStringValues.chooseItemsDot;
    } else if (paymentMethod == 2 && price > customer.credits) {
      message = AppStringValues.insufficientCreditBalace;
    }
    customSnackbar(context: context, text: message);

    return 0;
  } else {
    // Create order parameters.

    OrderStatus status = OrderStatus.completed;
    String username = 'generated-order';
    String userID = 'generated-order^^';
    String pickUpTime = getPickUpTime(0);
    String shop = currentShop.address;
    String shopID = currentShop.shopID;
    String company = currentShop.company;
    String companyID = currentShop.companyID;

    if (role == UserRole.customer) {
      status = paymentMethod == 1 ? OrderStatus.pending : OrderStatus.waiting;
      username = '${customer.name} ${customer.surname}';
      pickUpTime = getPickUpTime(plusTime);
      userID = customer.userID;
    }

    Map<String, String> stringList = getStringList(_selectedItems);
    String orderID = '';
    String day = DateFormat('EEEE').format(DateTime.now());

    DocumentReference _docRef;
    if (role == UserRole.worker) {
      // Place a passive order to database if order is generated by worker.
      _docRef = await CompanyOrderDatabase(companyID: companyID).createPassiveOrder(
          status,
          stringList,
          price,
          pickUpTime,
          username,
          shop,
          company,
          orderID,
          userID,
          shopID,
          companyID,
          day);
    } else {
      // Place an active order to company collection.
      _docRef = await CompanyOrderDatabase(companyID: companyID).createActiveOrder(
          status,
          stringList,
          price,
          pickUpTime,
          username,
          shop,
          company,
          orderID,
          userID,
          shopID,
          companyID,
          day);

      // Place an active order to user collection.
      await CustomerOrderDatabase(userID: userID).createActiveOrder(status, stringList, price,
          pickUpTime, username, shop, company, _docRef.id, shopID, companyID, day);
    }

    // Create order instance to show it to user after succesful order.
    Order order = Order(
      status: status,
      items: stringList,
      price: price,
      pickUpTime: pickUpTime,
      username: username,
      shop: shop,
      company: company,
      orderID: _docRef.id,
      userID: userID,
      shopID: shopID,
      companyID: companyID,
      day: day,
    );

    if (role == UserRole.customer) {
      if (paymentMethod == 1) {
        // Launch webview.
        launchPaymentGateway(context, price, items, order);
      } else {
        // Subtract the amount of credits from user.
        try {
          customer.updateCredits(customer.credits - price);
          Navigator.pop(context);
          Navigator.pop(context);
          Navigator.push(
            context,
            new MaterialPageRoute(
              builder: (context) => OrderDetailsCustomer(order: order, mode: 'after-creation'),
            ),
          );
        } catch (e) {
          customSnackbar(context: context, text: e.toString());
          return 0;
        }
      }
    } else {
      // Create order generated by worker (order is independent of any user account).
      Navigator.pop(context);
      Navigator.push(
        context,
        new MaterialPageRoute(
          builder: (context) => OrderDetailsWorker(order: order, mode: 'normal'),
        ),
      );
      customSnackbar(context: context, text: AppStringValues.orderCreationSuccess);
    }

    return 1;
  }
}
